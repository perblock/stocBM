% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partition_change_functions.R
\name{repeat_sample_likely_multipartite_partition}
\alias{repeat_sample_likely_multipartite_partition}
\title{repeat_sample_likely_multipartite_partition}
\usage{
repeat_sample_likely_multipartite_partition(
  table_aa,
  table_ab,
  table_bb,
  n_blocks = c(2, 2),
  n_runs = 10,
  n_iter = 100
)
}
\arguments{
\item{table_aa}{A square matrix representing the mobility table
in which rows and columns are partitioned into the same blocks (a).}

\item{table_ab}{A square matrix representing the mobility table
in which rows are partitioned into blocks (a) and columns are partitioned
into different blocks (b).}

\item{table_bb}{A square matrix representing the mobility table
in which rows and columns are partitioned
into the same blocks (b).}

\item{n_blocks}{A vector of two numbers representing the number of
blocks for (a) and (b).}

\item{n_runs}{The number of runs to perform.}

\item{n_iter}{The number of iterations to run the sampling in each run.}
}
\value{
A list containing two lists (partitions and fits), where each list contains the
partition and fit from each run; as well as the three mobility tables.
}
\description{
Repeat the function sample_likely_multipartite_partition for a specified number of runs
the first time with a random partition
and then with the partition from the previous run
return the partition and the fit of each run as two lists
}
\examples{
# Create a square matrix with 40 rows and 40 columns
mat_aa <- matrix(rpois(1600, lambda = 10), nrow = 40, ncol = 40)
# Create a square matrix with 40 rows and 40 columns
mat_ab <- matrix(rpois(1600, lambda = 10), nrow = 40, ncol = 40)
# Create a square matrix with 40 rows and 40 columns
mat_bb <- matrix(rpois(1600, lambda = 10), nrow = 40, ncol = 40)
# Repeat sampling a likely multipartite partition of the matrices with 2 blocks for
# (a) and 3 blocks for (b) for 10 runs
repeat_sample_likely_multipartite_partition(mat_aa, mat_ab, mat_bb,
n_blocks = c(2, 3), n_runs = 10, n_iter = 1000)
}
