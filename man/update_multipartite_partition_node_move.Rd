% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/partition_change_functions.R
\name{update_multipartite_partition_node_move}
\alias{update_multipartite_partition_node_move}
\title{update_multipartite_partition_node_move}
\usage{
update_multipartite_partition_node_move(
  table_aa,
  table_ab,
  table_bb,
  partition,
  swap_a = NULL
)
}
\arguments{
\item{table_aa}{A square matrix representing the mobility table
in which rows and columns are partitioned into the same blocks (a).}

\item{table_ab}{A square matrix representing the mobility table
in which rows are partitioned into blocks (a) and columns are partitioned
into different blocks (b).}

\item{table_bb}{A square matrix representing the mobility table
in which rows and columns are partitioned
into the same blocks (b).}

\item{partition}{A list containing two vectors:
one for the partitioning of (a)
and one for the partitioning of (b).}

\item{swap_a}{A boolean indicating whether to move the block membership of blocks (a) (TRUE)
or blocks (b) (FALSE). Default is NULL, which means it will be chosen randomly.}
}
\value{
A list containing the updated partitions (a) and (b)
and the summed fit of the log-linear model for the three matrices.
}
\description{
Update one of two partitions that determine cell counts
of three square matrices by moving the block membership of one node.
The partitions guide three matrices:
1. A sqare matrix in which rows and columns are partitioned
into the same blocks (a),
2. A square matrix in which rows are partitioned into blocks (a)
and columns are partitioned into different blocks (b),
3. A square matrix in which rows and columns are partitioned
into the same blocks (b).
This function iteratively checks all nodes and moves a node
to a different block that results in the best fit of the
log-linear model that predicts cell counts.
In each updating step, this function will either move the
block membership of blocks (a) or blocks (b),
depending on a parameter or randomly.
}
\examples{
# Create a square matrix with 40 rows and 40 columns
mat_aa <- matrix(rpois(1600, lambda = 10), nrow = 40, ncol = 40)
# Create a square matrix with 40 rows and 40 columns
mat_ab <- matrix(rpois(1600, lambda = 10), nrow = 40, ncol = 40)
# Create a square matrix with 40 rows and 40 columns
mat_bb <- matrix(rpois(1600, lambda = 10), nrow = 40, ncol = 40)
# Partition the matrices into 2 blocks for (a) and 3 blocks for (b)
init_partition <- partition_square_matrix(mat_ab, n_blocks = c(2, 3))
# Update the partition by moving a node
update_multipartite_partition_node_move(mat_aa, mat_ab, mat_bb,
                                        init_partition, swap_a = TRUE)
}
